 int n = arr.size();  
    vector<int> left(n), right(n), result(n, 0);  
    stack<int> st;  

    // Fill left[]: nearest smaller to left  
    for (int i = 0; i < n; ++i) {  
        while (!st.empty() && arr[st.top()] >= arr[i]) {  
            st.pop();  
        }  
        left[i] = (st.empty()) ? i : (i - st.top() - 1);  
        st.push(i);  
    }  

    st = stack<int>(); // Clear the stack for reuse  

    // Fill right[]: nearest smaller to right  
    for (int i = n - 1; i >= 0; --i) {  
        while (!st.empty() && arr[st.top()] > arr[i]) {  
            st.pop();  
        }  
        right[i] = (st.empty()) ? (n - i - 1) : (st.top() - i - 1);  
        st.push(i);  
    }  

    // Calculate maximum of minimums for each window size  
    for (int i = 0; i < n; ++i) {  
        int windowSize = left[i] + right[i] + 1;  
        result[windowSize - 1] = max(result[windowSize - 1], arr[i]);  
    }  

    // Fill the result array with maximums of minimums, ensuring each slot has the max for that window size and all larger sizes  
    for (int i = n - 2; i >= 0; --i) {  
        result[i] = max(result[i], result[i + 1]);  
    }  

    return result;  
